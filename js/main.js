// ===== FUNCIONES DE INICIALIZACI√ìN =====

// Se ejecuta una vez que el documento est√© listo
document.addEventListener('DOMContentLoaded', () => {
    cargarYMostrarProductos().then(() => {
        inicializarAutocomplete();
    });
    cargarEtiquetasDesdeCSV();
    inicializarSistemaDeFiltrado();
});

// Impide que aparezca el men√∫ contextual (clic derecho) del navegador
document.addEventListener("contextmenu", function(e) {
    e.preventDefault();
}, false);

// ===== FUNCIONES AUXILIARES/HELPERS =====

// Normaliza acentos, di√©resis, tildes, e√±es, etc. y hace trim
function normalizar(str) {
    return str
        .trim() // Elimina espacios al inicio y final
        .normalize('NFD') // Descompone los caracteres Unicode en sus componentes b√°sicos
        .replace(/[\u0300-\u036f]/g, '') // Elimina signos diacr√≠ticos (acentos, tildes, etc.)
        .replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2580-\u27BF]|\uD83E[\uDD10-\uDDFF]|ü´ò/g, '') // Elimina emojis, s√≠mbolos y caracteres especiales
        .toLowerCase();
}

// Formatear n√∫mero como moneda argentina
function formatearNumero(valor) {
  const numero = parseInt(valor, 10);
  return '$' + numero.toLocaleString('es-AR');
}

// Asegurarse de que el input de b√∫squeda est√© vac√≠o al cargar la p√°gina
function resetInputValue(inputElement) {
    inputElement.value = '';
}

// Deseleccionar todos los tags
function deselectAllTags() {
    document.querySelectorAll('.tags-container .tag:not(.toggle-tag)').forEach(tag => {
        tag.classList.remove('selected');
    });
}

// ===== FUNCIONES PRINCIPALES =====

// Carga el archivo CSV desde GitHub, lo parsea y muestra los productos
async function cargarYMostrarProductos() {
    try {
        const urlCSV = 'https://raw.githubusercontent.com/dieteticaaxelyjavi/productos/main/lista.csv';
        const respuesta = await fetch(urlCSV);
        const textoCSV = await respuesta.text();

        const productos = parsearCSV(textoCSV);
        mostrarProductos(productos);
        activarLazyLoad();
    } catch (error) {
        console.error('Error al cargar el archivo CSV:', error);
    }
}

function inicializarAutocomplete() {
    const inputFiltro = document.getElementById('filter-input');
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'autocomplete-suggestions';
    suggestionsContainer.style.display = 'none';
    
    // Insertar despu√©s del input wrapper
    inputFiltro.parentNode.parentNode.appendChild(suggestionsContainer);

    inputFiltro.addEventListener('input', function() {
        const value = this.value.trim().toLowerCase();
        suggestionsContainer.innerHTML = '';
        suggestionsContainer.style.display = 'none';

        if (value.length < 2) return; // Mostrar sugerencias solo despu√©s de 2 caracteres

        const terminosBusqueda = ['Aceite de oliva', 'Aceite de coco', 'Aceite de lino', 'Aceite de nu√©z pec√°n', 'Aceite de s√©samo', 'Aj√≠ molido', 'Ajo granulado', 'Ajo en polvo', 'Almendras', 'Ambay', 'Anis estrellado', 'Arroz yaman√≠', 'Arroz integral largo fino', 'Arveja seca partida', 'Avellanas', 'Avellanas con chocolate', 'Avena instant√°nea', 'Avena instant√°nea sin TACC', 'Avena arrollada', 'Az√∫car mascabo', 'Barrita de cereal', 'Bicarbonato de sodio', 'Boldo', 'Bolsita para hacer leches vegetales', 'Burrito', 'Cacao amargo', 'Caf√© de algarroba', 'Cal√©ndula', 'Canela en polvo', 'Galletitas', 'Carqueja', 'Casta√±as de caj√∫', 'Cedr√≥n hojas', 'Chimichurri', 'Chocolate 60%', 'Chocolate 70%', 'Chocolate 80%', 'Chocolate sin az√∫car agregada', 'Coco rallado', 'Cola de caballo', 'Comino', 'Creatina', 'C√∫rcuma en polvo', 'Curry de la india', 'D√°tiles', 'Espirulina', 'Extracto natural de vainilla', 'F√©cula de mandioca', 'Fideos de arroz', 'Tallarines integrales', 'Fideos codito con harina de garbanzos', 'Galletas de arroz', 'Garbanzos', 'Ghee', 'Harina integral', 'Harina integral org√°nica', 'Harina de centeno org√°nica', 'Harina de garbanzo', 'Harina de garbanzo sin TACC', 'Harina para arepas', 'Harina de almendras', 'Harina de ch√≠a', 'Harina de lino', 'Harina de arroz', 'Harina de arroz sin TACC', 'Harina de algarroba', 'Harina de coco', 'Harina integral de trigo', 'Hibiscus', 'Higos blancos', 'Hongos de pino', 'Hongos adapt√≥genos', 'Melena de le√≥n doble extracto', 'Reishi doble extracto', 'Cordy doble extracto', 'Shiitake doble extracto', 'Cola de pavo doble extracto', 'Huevos de gallinas felices', 'Jengibre en polvo', 'Laurel hojas', 'Lavanda flores', 'Leche de nuez pecan sin az√∫car', 'Leche de almendras prot√©ica sin az√∫car', 'Leche de almendras sin az√∫car', 'Lentejas', 'Nutrileva | Levadura nutricional', 'Llant√©n', 'Maca', 'Maicena', 'F√©cula de ma√≠z', 'F√©cula de ma√≠z sin TACC', 'Ma√≠z piscingallo', 'Man√≠ tostado sin sal', 'Man√≠ tostado con sal', 'Man√≠ crudo', 'Man√≠ con chocolate', 'Manzanilla', 'Marcela', 'Menta', 'Merk√©n', 'Mermelada de frutos rojos', 'Miel', 'Miel con jengibre', 'Miel con menta', 'Semillas de Mijo', 'Mix de frutos secos', 'Nuez moscada', 'Nuez mariposa', 'Nuez pec√°n', 'Or√©gano', 'Pasas de uva morochas', 'Pasas de uva rubias', 'Pasas de uva con chocolate', 'Pasta de man√≠', 'Tahini', 'Peperina hojas', 'Peras deshidratadas', 'Pimenton ahumado', 'Pimenton dulce', 'Pimienta negra molida', 'Pimienta blanca molida', 'Poleo', 'Polvo de hornear', 'Porotos Mung', 'Porotos Negros', 'Porotos Aduki', 'Porotos Alubia', 'Prote√≠na vegetal', 'Provenzal', 'Quinoa', 'Romero', 'Sahumerios', 'Sal marina fina', 'Sal marina gruesa', 'Sal rosa del himalaya', 'Semillas de ch√≠a', 'Semillas de girasol', 'Semillas de lino marr√≥n', 'Semillas de s√©samo blanco', 'Semillas de s√©samo integral', 'Semillas de s√©samo negro', 'Semillas de zapallo', 'Semillas de lino dorado', 'Soja texturizada org√°nica', 'Soja texturizada', 'Stevia en hojas', 'Pasta de dientes Sudanta', 'T√© negro', 'T√© rojo', 'T√© verde', 'Tilo', 'Tofu', 'Tomates secos', 'Tomate triturado', 'Tomillo', 'Yerba', 'Barbacu√°'];

        const suggestions = terminosBusqueda.filter(nombre =>
            normalizar(nombre).includes(normalizar(value))
        ).slice(0, 5); // M√°ximo 5 sugerencias

        if (suggestions.length > 0) {
            suggestionsContainer.style.display = 'block';
            suggestions.forEach(suggestion => {
                const div = document.createElement('div');
                div.className = 'suggestion-item';
                div.textContent = suggestion;
                div.addEventListener('click', () => {
                    inputFiltro.value = suggestion;
                    filtrarProductos();
                    suggestionsContainer.style.display = 'none';
                });
                suggestionsContainer.appendChild(div);
            });
        }
    });

    // Ocultar sugerencias al hacer clic fuera
    document.addEventListener('click', (e) => {
        if (!suggestionsContainer.contains(e.target) && e.target !== inputFiltro) {
            suggestionsContainer.style.display = 'none';
        }
    });

    inputFiltro.addEventListener('blur', () => {
        // Peque√±o delay para permitir el clic en las sugerencias
        setTimeout(() => {
            suggestionsContainer.style.display = 'none';
        }, 200);
    });
}

// Convierte el texto de un CSV en un array de objetos
function parsearCSV(csv) {
    const csvSeparator = ',';
    const filas = csv.split('\n').filter(fila => fila.trim() !== '');
    const encabezados = filas[0].split(csvSeparator);

    return filas.slice(1).map(fila => {
        const valores = fila.split(csvSeparator);
        const producto = {};

        encabezados.forEach((columna, i) => {
            // En los datos originales, las comas son remplazads por punto y comas al subirse a github
            producto[columna.trim()] = valores[i]?.trim().replaceAll(';', ',') || '';
        });

        return producto;
    });
}

// Filtra los productos por texto ingresado en el input
function filtrarProductos() {
    const texto = normalizar(document.getElementById('filter-input').value);
    const productos = document.querySelectorAll('.producto-item');
    let hayCoincidencias = false;

    productos.forEach(item => {
        const titulo = normalizar(item.querySelector('.producto-titulo').textContent);
        const descripcion = normalizar(item.querySelector('.producto-descripcion').textContent);
        const tags = normalizar(item.querySelector('.producto-tags').textContent);

        const visible = titulo.includes(texto) || descripcion.includes(texto) || tags.includes(texto);
        item.style.display = visible ? '' : 'none';

        if (visible) hayCoincidencias = true;
    });

    mostrarMensajeSinResultados(!hayCoincidencias);

    const clearBtn = document.getElementById('clear-filter');
    clearBtn.style.display = document.getElementById('filter-input').value ? 'block' : 'none';
}

// Carga las im√°genes cuando est√°n por entrar en pantalla
function activarLazyLoad() {
    const imagenes = document.querySelectorAll('img.lazy');

    const observer = new IntersectionObserver((entradas, observer) => {
        entradas.forEach(entrada => {
            if (entrada.isIntersecting) {
                const img = entrada.target;
                img.src = img.getAttribute('data-src');
                img.classList.remove('lazy');
                observer.unobserve(img);
            }
        });
    });

    imagenes.forEach(img => observer.observe(img));
}

// ===== FUNCIONES DE UI/INTERFAZ =====

// Muestra la lista de productos en el HTML
function mostrarProductos(productos) {
    const contenedor = document.querySelector('.productos-lista');
    contenedor.innerHTML = ''; // Limpiar contenido anterior

    // Crear overlay para im√°genes a pantalla completa
    const overlay = document.createElement('div');
    overlay.className = 'image-overlay';
    overlay.innerHTML = `
        <img src="" alt="Imagen ampliada">
        <button class="close-button" aria-label="Cerrar imagen"></button>
    `;
    document.body.appendChild(overlay);

    const closeButton = overlay.querySelector('.close-button');

    // Funci√≥n para cerrar el overlay
    const cerrarOverlay = () => {
        document.body.classList.remove('overlay-active');
        overlay.classList.remove('active');
    };

    // Funci√≥n para abrir el overlay
    const abrirOverlay = () => {
        document.body.classList.add('overlay-active');
        overlay.classList.add('active');
    };

    // Eventos para cerrar
    closeButton.addEventListener('click', (e) => {
        e.stopPropagation();
        cerrarOverlay();
    });

    overlay.addEventListener('click', (e) => {
        if (e.target === overlay) { // Solo cerrar si se hace clic fuera de la imagen
            overlay.classList.remove('active');
        }
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && overlay.classList.contains('active')) {
            overlay.classList.remove('active');
        }
    });

    // Ordenar productos: primero los con stock, luego los sin stock
    const productosOrdenados = [...productos].sort((a, b) => {
        const aSinStock = a.hay_stock && a.hay_stock.toLowerCase() === "no";
        const bSinStock = b.hay_stock && b.hay_stock.toLowerCase() === "no";

        if (aSinStock && !bSinStock) return 1;    // a va despu√©s de b
        if (!aSinStock && bSinStock) return -1;   // a va antes de b
        return 0;                                 // mantener orden original
    });

    productosOrdenados.forEach(producto => {
        const item = document.createElement('li');
        item.className = 'producto-item';

        // A√±adir clase sin-stock si no hay stock
        if (producto.hay_stock && producto.hay_stock.toLowerCase() === "no") {
            item.classList.add('sin-stock');
        }

        // Imagen del producto
        const thumbnailDiv = document.createElement('div');
        thumbnailDiv.className = 'producto-thumbnail';

        const imagen = document.createElement('img');
        if (producto.imagen) {
            imagen.setAttribute('data-src', producto.imagen);
            imagen.className = 'lazy';
        } else {
            imagen.src = 'img/sin-imagen.png';
        }
        imagen.alt = producto.titulo || 'Imagen del producto';

        // Agregar evento para mostrar imagen a pantalla completa
        thumbnailDiv.addEventListener('click', (e) => {
            e.stopPropagation();
            const imgSrc = producto.imagen || 'img/sin-imagen.png';
            const overlayImg = overlay.querySelector('img');
            overlayImg.src = imgSrc;
            overlayImg.alt = producto.titulo || 'Imagen ampliada';
            overlay.classList.add('active');
        });

        thumbnailDiv.appendChild(imagen);

        const contenidoDiv = document.createElement('div');
        contenidoDiv.className = 'producto-contenido';

        // Cartel de oferta
        if (producto.es_oferta && (producto.es_oferta.toLowerCase() === 's√≠' || producto.es_oferta.toLowerCase() === 'si')) {
            const ofertaLabel = document.createElement('span');
            ofertaLabel.className = 'oferta-label';
            ofertaLabel.textContent = 'OFERTA';
            thumbnailDiv.appendChild(ofertaLabel);
        }

        // T√≠tulo
        const titulo = document.createElement('p');
        titulo.className = 'producto-titulo';
        titulo.textContent = producto.titulo;

        // Precio
        const precio = document.createElement('p');
        precio.className = 'producto-precio';
        precio.textContent = formatearNumero(producto.precio);

        if (producto.unidad) {
            precio.textContent += ' ' + producto.unidad;
        }

        // Descripci√≥n del producto
        const descripcion = document.createElement('p');
        descripcion.className = 'producto-descripcion';
        const textoDescripcion = document.createTextNode(producto.descripcion);
        descripcion.appendChild(textoDescripcion);
        if (textoDescripcion.textContent == '') {
            descripcion.style.display = 'none';
        }

        // Logo Sin TACC
        if (producto.tags && producto.tags.includes('sin TACC')) {
            const logo = document.createElement('img');
            logo.src = 'img/sin-tacc.png';
            logo.alt = 'Sin TACC';
            logo.title = 'Sin TACC';
            logo.className = 'logo-sin-tacc-inline';
            titulo.appendChild(logo);
        }

        // Logo org√°nico
        if (producto.tags && producto.tags.includes('org√°nico')) {
            const logo = document.createElement('img');
            logo.src = 'img/organico.png';
            logo.alt = 'Org√°nico';
            logo.title = 'Org√°nico';
            logo.className = 'logo-organico-inline';
            titulo.appendChild(logo);
        }

        // Tags (no visibles)
        const tags = document.createElement('p');
        tags.className = 'producto-tags';
        tags.textContent = producto.tags || '';

        if (producto.oferta && producto.oferta === 's√≠') {
            tags.textContent = tags.textContent + '|ofertas'
        }

        // Bot√≥n para agregar al carrito
        if (producto.hay_stock && producto.hay_stock.toLowerCase() !== "no") {
            const botonAgregar = document.createElement('button');
            botonAgregar.className = 'boton-agregar';
            botonAgregar.innerHTML = '+';
            botonAgregar.title = 'Agregar al carrito';
            botonAgregar.addEventListener('click', (e) => {
                e.stopPropagation();
                agregarAlCarrito({
                    id: producto.titulo, // Usar t√≠tulo como ID √∫nico
                    titulo: producto.titulo,
                    precio: producto.precio,
                    unidad: producto.unidad
                });
            });
            thumbnailDiv.appendChild(botonAgregar);
        }

        contenidoDiv.appendChild(titulo);
        contenidoDiv.appendChild(descripcion);
        contenidoDiv.appendChild(precio);
        contenidoDiv.appendChild(tags);

        // Ensamblar la imagen y el contenido
        item.appendChild(thumbnailDiv);
        item.appendChild(contenidoDiv);

        contenedor.appendChild(item);
    });
}

// Muestra u oculta el mensaje de 'Sin resultados'
function mostrarMensajeSinResultados(mostrar) {
    const contenedor = document.querySelector('.productos-lista');
    let mensaje = document.getElementById('no-results-message');
    let imagen = document.getElementById('no-results-image');

    if (mostrar) {
        if (!mensaje) {
            mensaje = document.createElement('li');
            mensaje.id = 'no-results-message';
            mensaje.style.textAlign = 'center';
            mensaje.style.color = '#555';
            mensaje.style.padding = '10px';
            mensaje.style.paddingBottom = '0px';
            mensaje.innerHTML = `<p>Ning√∫n elemento coincide con la b√∫squeda</p>`;
            contenedor.appendChild(mensaje);
        }
        if (!imagen) {
            imagen = document.createElement('img');
            imagen.id = 'no-results-image';
            imagen.src = 'img/pava.png';
            imagen.alt = 'Nada por aqu√≠';
            imagen.style.display = 'block';
            imagen.style.margin = '0 auto';
            imagen.style.marginTop = '-30px';
            imagen.style.width = '50vw'; // 50% del ancho de la ventana
            imagen.style.height = 'auto';
            contenedor.appendChild(imagen);
        }
    } else {
        if (mensaje) {
            mensaje.remove();
        }
        if (imagen) {
            imagen.remove();
        }
    }
}

// ===== FUNCIONES DE CONFIGURACI√ìN DEL SISTEMA DE FILTRADO =====

// Configura el filtro de b√∫squeda y el bot√≥n de borrado del input de b√∫squeda
async function inicializarSistemaDeFiltrado() {
    const inputFiltro = document.getElementById('filter-input');
    resetInputValue(inputFiltro);
    const { inputWrapper, clearBtn } = createInputWrapperWithClearButton(inputFiltro);
    setupInputEvents(inputFiltro, clearBtn);
    setupClearButtonEvents(inputFiltro, clearBtn);
    const toggleBtn = createToggleButton();
}

// Crear un wrapper para el input y un bot√≥n de limpieza dentro del wrapper
function createInputWrapperWithClearButton(inputElement) {
    const inputWrapper = document.createElement('div');
    inputWrapper.className = 'filter-input-wrapper';

    // Reemplazar el input con el wrapper que contiene el input
    inputElement.parentNode.insertBefore(inputWrapper, inputElement);
    inputWrapper.appendChild(inputElement);

    // Crear bot√≥n de limpieza
    const clearBtn = document.createElement('span');
    clearBtn.id = 'clear-filter';
    clearBtn.innerHTML = '&times;';
    clearBtn.title = 'Borrar b√∫squeda';
    clearBtn.style.display = 'none';

    inputWrapper.appendChild(clearBtn);

    return { inputWrapper, clearBtn };
}

// Configurar eventos del input de b√∫squeda
function setupInputEvents(inputElement, clearButton) {
    inputElement.addEventListener('input', () => {
        filtrarProductos();
        clearButton.style.display = inputElement.value ? 'block' : 'none';
    });
}

// Configurar eventos del bot√≥n de limpieza
function setupClearButtonEvents(inputElement, clearButton) {
    clearButton.addEventListener('click', () => {
        inputElement.value = '';
        deselectAllTags();
        filtrarProductos();
        clearButton.style.display = 'none';
    });
}

// Crear bot√≥n toggle
function createToggleButton() {
    const toggleBtn = document.createElement('button');
    toggleBtn.className = 'tag toggle-tag';
    toggleBtn.textContent = '+';
    toggleBtn.id = 'toggle-tags';
    return toggleBtn;
}

// ===== FUNCIONES DE GESTI√ìN DE ETIQUETAS =====

async function cargarEtiquetasDesdeCSV() {
    const urlCSV = 'https://raw.githubusercontent.com/dietetica/productos/main/etiquetas';
    try {
        const respuesta = await fetch(urlCSV);
        const texto = await respuesta.text();

        const lineas = texto.trim().split('\n');
        const etiquetas = lineas.map(l => l.trim());

        const contenedor = document.getElementById('tags-container');
        contenedor.innerHTML = '';

        etiquetas.forEach(etiqueta => {
            const boton = document.createElement('button');
            boton.className = 'tag';
            boton.textContent = etiqueta;
            contenedor.appendChild(boton);
        });

        inicializarEventosTags();

    } catch (error) {
        console.error('Error al cargar las etiquetas:', error);
    }
}

function inicializarEventosTags() {
    const tagsContainer = document.querySelector('.tags-container');
    const inputFiltro = document.getElementById('filter-input');

    // Eliminar bot√≥n toggle si existe
    const oldToggle = document.getElementById('toggle-tags');
    if (oldToggle) oldToggle.remove();

    // Crear bot√≥n toggle
    const toggleBtn = document.createElement('button');
    toggleBtn.className = 'tag toggle-tag';
    toggleBtn.textContent = '+';
    toggleBtn.id = 'toggle-tags';
    tagsContainer.appendChild(toggleBtn);

    // Recolectar tags (excluye toggle por ahora)
    let tags = Array.from(tagsContainer.querySelectorAll('.tag')).filter(tag => tag.id !== 'toggle-tags');

    function calcularLineas() {
        // Resetear estado
        tagsContainer.classList.remove('expandido');
        tags.forEach(tag => tag.style.display = 'inline-block');
        toggleBtn.style.display = 'inline-block';

        // Forzar c√°lculo de layout
        void tagsContainer.offsetHeight;

        const containerWidth = tagsContainer.offsetWidth;
        const tagElements = tags.map(tag => ({
            element: tag,
            width: tag.offsetWidth + 6.5 + 1 // width + gap + changui
        }));

        const toggleWidth = toggleBtn.offsetWidth + 6.5;
        let lines = [[], []];
        let lineWidths = [0, 0];
        let remainingTags = [...tagElements];
        let allTagsVisible = true;

        // Llenar primera l√≠nea
        while (remainingTags.length > 0 && lineWidths[0] + remainingTags[0].width <= containerWidth) {
            lines[0].push(remainingTags[0]);
            lineWidths[0] += remainingTags[0].width;
            remainingTags.shift();
        }

        // Llenar segunda l√≠nea (incluyendo el bot√≥n si es necesario)
        if (remainingTags.length > 0) {
            // Intentar agregar el bot√≥n a la segunda l√≠nea
            const lastLineWithButton = lineWidths[1] + toggleWidth <= containerWidth;

            // Calcular espacio restante
            let remainingWidth = containerWidth - lineWidths[1];

            // Agregar tags que quepan
            while (remainingTags.length > 0 && lineWidths[1] + remainingTags[0].width <= containerWidth) {
                lines[1].push(remainingTags[0]);
                lineWidths[1] += remainingTags[0].width;
                remainingTags.shift();
            }

            // Si quedan tags, mostrar el bot√≥n
            if (remainingTags.length > 0 || !lastLineWithButton) {
                allTagsVisible = false;
                // Retroceder tags hasta que quepa el bot√≥n
                while (lineWidths[1] + toggleWidth > containerWidth && lines[1].length > 0) {
                    const removedTag = lines[1].pop();
                    lineWidths[1] -= removedTag.width;
                    remainingTags.unshift(removedTag);
                }
            }
        }

        // Aplicar visibilidad
        tags.forEach(tag => {
            const isVisible = lines.flat().some(item => item.element === tag);
            tag.style.display = isVisible ? 'inline-block' : 'none';
        });

        // Configurar bot√≥n toggle
        toggleBtn.textContent = allTagsVisible ? '' : '+';
        toggleBtn.style.display = allTagsVisible ? 'none' : 'inline-block';
    }

    function expandirTags() {
        tagsContainer.classList.add('expandido');
        tags.forEach(tag => tag.style.display = 'inline-block');
        toggleBtn.textContent = '-';
    }

    function colapsarTags() {
        tagsContainer.classList.remove('expandido');
        calcularLineas();
    }

    toggleBtn.onclick = () => {
        const expandido = toggleBtn.textContent === '+';
        if (expandido) expandirTags();
        else colapsarTags();
    };

    tags.forEach(tag => {
        tag.addEventListener('click', () => {
            // Remover clase selected de todos los tags primero
            tags.forEach(t => t.classList.remove('selected'));

            // Alternar selecci√≥n solo si el tag coincide con el input
            if (inputFiltro.value === tag.textContent) {
                inputFiltro.value = '';
            } else {
                inputFiltro.value = tag.textContent;
                tag.classList.add('selected');
            }

            filtrarProductos();
        });
    });

    inputFiltro.addEventListener('input', () => {
        // Solo deseleccionar tags si el usuario est√° escribiendo (no cuando se establece por tag)
        if (!inputFiltro.dataset.porTag) {
            tags.forEach(t => t.classList.remove('selected'));
        }
        delete inputFiltro.dataset.porTag;

        filtrarProductos();
        document.getElementById('clear-filter').style.display = inputFiltro.value ? 'block' : 'none';
    });

    // Ejecutar al inicio y al redimensionar
    const recalcular = () => requestAnimationFrame(calcularLineas);
    recalcular();
    window.addEventListener('resize', recalcular);
}

// ===== FUNCI√ìN GLOBAL PARA AGREGAR AL CARRITO =====
window.agregarAlCarrito = function(producto) {
    if (window.carrito) {
        window.carrito.agregarProducto(producto);
    } else {
        console.error('El carrito no est√° inicializado');
    }
};